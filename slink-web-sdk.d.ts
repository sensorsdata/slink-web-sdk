// Generated by dts-bundle-generator v6.12.0

export interface BrowserResult {
	type: string;
	name: string;
	version: string;
	engine: string;
	engineVersion: string;
}
export interface MobileAppResult {
	type: string;
	name: string;
	version: string;
}
export interface FeedReaderResult {
	type: string;
	name: string;
	version: string;
	url: string;
}
export interface LibraryResult {
	type: string;
	name: string;
	version: string;
	url: string;
}
export interface MediaPlayerResult {
	type: string;
	name: string;
	version: string;
}
export interface PersonalInformationManagerResult {
	type: string;
	name: string;
	version: string;
}
export declare type ClientResult = BrowserResult | FeedReaderResult | LibraryResult | MediaPlayerResult | MobileAppResult | PersonalInformationManagerResult | null;
export declare type DeviceType = "" | "desktop" | "smartphone" | "tablet" | "television" | "smart display" | "camera" | "car" | "console" | "portable media player" | "phablet" | "wearable" | "smart speaker" | "feature phone" | "peripheral";
export interface GenericDeviceResult {
	type: DeviceType;
	brand: string;
	model: string;
}
export declare type DeviceResult = GenericDeviceResult | null;
export interface OperatingSystemResult {
	name: string;
	version: string;
	platform: "ARM" | "x64" | "x86" | "MIPS" | "SuperH" | "";
}
export declare type Result = OperatingSystemResult | null;
export interface BotResult {
	name: string;
	category: string;
	url: string;
	producer: {
		name: string;
		url: string;
	};
}
export declare namespace BotParser {
	type DeviceDetectorBotResult = BotResult | null;
}
declare class BotParser {
	parse: (userAgent: string) => BotParser.DeviceDetectorBotResult;
}
export type DeviceDetectorBotResult = BotResult | null;
export declare namespace DeviceDetector {
	interface DeviceDetectorResult {
		client: ClientResult;
		device: DeviceResult;
		os: OperatingSystemResult;
		bot: BotParser.DeviceDetectorBotResult;
	}
	interface DeviceDetectorOptions {
		skipBotDetection: boolean;
		versionTruncation: 0 | 1 | 2 | 3 | null;
	}
}
declare class DeviceDetector {
	private clientParser;
	private deviceParser;
	private operatingSystemParser;
	private vendorFragmentParser;
	private botParser;
	private readonly options;
	constructor(options?: Partial<DeviceDetector.DeviceDetectorOptions>);
	parse: (userAgent: string) => DeviceDetector.DeviceDetectorResult;
	private hasAndroidMobileFragment;
	private hasAndroidTabletFragment;
	private hasDesktopFragment;
	private isDesktop;
	private usesMobileBrowser;
	private isToucheEnabled;
	private createDeviceObject;
}
export interface DeviceDetectorResult {
	client: ClientResult;
	device: DeviceResult;
	os: OperatingSystemResult;
	bot: BotParser.DeviceDetectorBotResult;
}
export interface DeviceDetectorOptions {
	skipBotDetection: boolean;
	versionTruncation: 0 | 1 | 2 | 3 | null;
}
declare enum SLinkLandingPageType {
	INTELLIGENCE = "intelligence",
	OTHER = "other"
}
declare enum SLinkConfigSource {
	INTELLIGENCE = "intelligence",
	OTHER = "other"
}
export interface IChannelParam {
	[key: string]: string | number;
}
export interface ISLinkErrorInfo {
	code: string | number;
	msg: string;
	fixSuggestion?: string;
}
export interface ISLinkAPIResult extends ISLinkErrorInfo {
	isSuccess: boolean;
}
export declare type appChannelName = "apple" | "huawei" | "xiaomi" | "oppo" | "vivo" | "samsung" | "yingyongbao";
export declare type baseChannelLinkMap = Partial<Record<appChannelName, string>>;
export interface IDownloadH5 extends baseChannelLinkMap {
	common: string;
	otherOS: string;
}
export interface IDownloadH5Template extends baseChannelLinkMap {
	common: string;
}
export interface ISensorsSLinkConfig {
	[key: string]: any;
	universalLink?: string;
	appLink?: string;
	uriScheme?: string;
	marketSchemes?: baseChannelLinkMap;
	downloadH5?: IDownloadH5;
	downloadH5Template?: IDownloadH5Template;
	appWakeTimeout?: number;
	appIconIOS?: string;
	appIconAndroid?: string;
	appNameIOS?: string;
	appNameAndroid?: string;
	slinkId: string;
	slinkUrl: string;
	slinkTemplateId?: string;
	slinkConfigUrl?: string;
	slinkType?: string;
	channelType: string;
	channelParams: string;
	utmParams?: IChannelParam;
	customParams?: IChannelParam;
	landingPageType: SLinkLandingPageType;
	saReportUrl: string;
	satReportUrl: string;
	shortType: string;
	am: string;
	bundleId: string;
	packageName: string;
	configSource?: SLinkConfigSource;
	dynamicUtmParams?: IChannelParam;
	dynamicCustomParams?: IChannelParam;
}
declare class ClassSensorsSLink {
	landingPageEntered: boolean;
	private currentDeviceInfo;
	private isInitialized;
	private currentConfig;
	private hidden;
	private sd;
	constructor();
	getDeviceInfo: (userAgent?: string) => DeviceDetector.DeviceDetectorResult;
	isWeChat: () => boolean;
	isWeibo: () => boolean;
	isQQ: () => boolean;
	isWebview: () => boolean;
	getOS: () => string;
	getIOSMainVersion: () => number;
	isIOS: () => boolean;
	isAndroid: () => boolean;
	isSupportOS: () => boolean;
	getDeviceBrand: () => string;
	getUTMParams: () => IChannelParam;
	getCustomParams: () => IChannelParam;
	getAppInfo: () => Partial<Pick<ISensorsSLinkConfig, "appIconIOS" | "appNameIOS" | "bundleId" | "appIconAndroid" | "appNameAndroid" | "packageName">>;
	getSLinkInfo: () => Partial<Pick<ISensorsSLinkConfig, "universalLink" | "appLink" | "uriScheme" | "slinkId" | "slinkTmpId" | "slinkUrl" | "shortType" | "am">>;
	handleNotSupportOS: () => void;
	openApp: () => ISLinkAPIResult;
	jumpDownloadH5: () => ISLinkAPIResult;
	getDownloadH5: () => string;
	sendAppChannelMatchingEvent: () => ISLinkAPIResult;
	downloadApp: () => ISLinkAPIResult;
	init: (sd: any, initConfig: ISensorsSLinkConfig) => ISLinkAPIResult;
	configInitHandle: () => void;
	private initUndoneHandle;
	private isPageHidden;
	private handleOpenApp;
}
declare const SensorsSLink: ClassSensorsSLink;

export {
	SensorsSLink as default,
};

export {};
